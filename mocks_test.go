// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/blockloop/boar (interfaces: HTTPError,Context,ResponseWriter,Handler)

package boar

import (
	context "context"
	
	httprouter "github.com/julienschmidt/httprouter"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockHTTPError is a mock of HTTPError interface
type MockHTTPError struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPErrorMockRecorder
}

// MockHTTPErrorMockRecorder is the mock recorder for MockHTTPError
type MockHTTPErrorMockRecorder struct {
	mock *MockHTTPError
}

// NewMockHTTPError creates a new mock instance
func NewMockHTTPError(ctrl *gomock.Controller) *MockHTTPError {
	mock := &MockHTTPError{ctrl: ctrl}
	mock.recorder = &MockHTTPErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHTTPError) EXPECT() *MockHTTPErrorMockRecorder {
	return m.recorder
}

// Cause mocks base method
func (m *MockHTTPError) Cause() error {
	ret := m.ctrl.Call(m, "Cause")
	ret0, _ := ret[0].(error)
	return ret0
}

// Cause indicates an expected call of Cause
func (mr *MockHTTPErrorMockRecorder) Cause() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cause", reflect.TypeOf((*MockHTTPError)(nil).Cause))
}

// Error mocks base method
func (m *MockHTTPError) Error() string {
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error
func (mr *MockHTTPErrorMockRecorder) Error() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockHTTPError)(nil).Error))
}

// MarshalJSON mocks base method
func (m *MockHTTPError) MarshalJSON() ([]byte, error) {
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON
func (mr *MockHTTPErrorMockRecorder) MarshalJSON() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockHTTPError)(nil).MarshalJSON))
}

// Status mocks base method
func (m *MockHTTPError) Status() int {
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(int)
	return ret0
}

// Status indicates an expected call of Status
func (mr *MockHTTPErrorMockRecorder) Status() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockHTTPError)(nil).Status))
}

// MockContext is a mock of Context interface
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockContext) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockContextMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockContext)(nil).Context))
}

// ReadForm mocks base method
func (m *MockContext) ReadForm(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "ReadForm", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadForm indicates an expected call of ReadForm
func (mr *MockContextMockRecorder) ReadForm(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadForm", reflect.TypeOf((*MockContext)(nil).ReadForm), arg0)
}

// ReadJSON mocks base method
func (m *MockContext) ReadJSON(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "ReadJSON", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadJSON indicates an expected call of ReadJSON
func (mr *MockContextMockRecorder) ReadJSON(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadJSON", reflect.TypeOf((*MockContext)(nil).ReadJSON), arg0)
}

// ReadQuery mocks base method
func (m *MockContext) ReadQuery(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "ReadQuery", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadQuery indicates an expected call of ReadQuery
func (mr *MockContextMockRecorder) ReadQuery(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadQuery", reflect.TypeOf((*MockContext)(nil).ReadQuery), arg0)
}

// ReadURLParams mocks base method
func (m *MockContext) ReadURLParams(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "ReadURLParams", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadURLParams indicates an expected call of ReadURLParams
func (mr *MockContextMockRecorder) ReadURLParams(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadURLParams", reflect.TypeOf((*MockContext)(nil).ReadURLParams), arg0)
}

// Request mocks base method
func (m *MockContext) Request() *http.Request {
	ret := m.ctrl.Call(m, "Request")
	ret0, _ := ret[0].(*http.Request)
	return ret0
}

// Request indicates an expected call of Request
func (mr *MockContextMockRecorder) Request() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockContext)(nil).Request))
}

// Response mocks base method
func (m *MockContext) Response() ResponseWriter {
	ret := m.ctrl.Call(m, "Response")
	ret0, _ := ret[0].(ResponseWriter)
	return ret0
}

// Response indicates an expected call of Response
func (mr *MockContextMockRecorder) Response() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Response", reflect.TypeOf((*MockContext)(nil).Response))
}

// URLParams mocks base method
func (m *MockContext) URLParams() httprouter.Params {
	ret := m.ctrl.Call(m, "URLParams")
	ret0, _ := ret[0].(httprouter.Params)
	return ret0
}

// URLParams indicates an expected call of URLParams
func (mr *MockContextMockRecorder) URLParams() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLParams", reflect.TypeOf((*MockContext)(nil).URLParams))
}

// WriteJSON mocks base method
func (m *MockContext) WriteJSON(arg0 int, arg1 interface{}) error {
	ret := m.ctrl.Call(m, "WriteJSON", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteJSON indicates an expected call of WriteJSON
func (mr *MockContextMockRecorder) WriteJSON(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteJSON", reflect.TypeOf((*MockContext)(nil).WriteJSON), arg0, arg1)
}

// WriteStatus mocks base method
func (m *MockContext) WriteStatus(arg0 int) error {
	ret := m.ctrl.Call(m, "WriteStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteStatus indicates an expected call of WriteStatus
func (mr *MockContextMockRecorder) WriteStatus(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteStatus", reflect.TypeOf((*MockContext)(nil).WriteStatus), arg0)
}

// MockResponseWriter is a mock of ResponseWriter interface
type MockResponseWriter struct {
	ctrl     *gomock.Controller
	recorder *MockResponseWriterMockRecorder
}

// MockResponseWriterMockRecorder is the mock recorder for MockResponseWriter
type MockResponseWriterMockRecorder struct {
	mock *MockResponseWriter
}

// NewMockResponseWriter creates a new mock instance
func NewMockResponseWriter(ctrl *gomock.Controller) *MockResponseWriter {
	mock := &MockResponseWriter{ctrl: ctrl}
	mock.recorder = &MockResponseWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResponseWriter) EXPECT() *MockResponseWriterMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockResponseWriter) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockResponseWriterMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockResponseWriter)(nil).Close))
}

// Flush mocks base method
func (m *MockResponseWriter) Flush() error {
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush
func (mr *MockResponseWriterMockRecorder) Flush() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockResponseWriter)(nil).Flush))
}

// Header mocks base method
func (m *MockResponseWriter) Header() http.Header {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(http.Header)
	return ret0
}

// Header indicates an expected call of Header
func (mr *MockResponseWriterMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockResponseWriter)(nil).Header))
}

// Len mocks base method
func (m *MockResponseWriter) Len() int {
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len
func (mr *MockResponseWriterMockRecorder) Len() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockResponseWriter)(nil).Len))
}

// Status mocks base method
func (m *MockResponseWriter) Status() int {
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(int)
	return ret0
}

// Status indicates an expected call of Status
func (mr *MockResponseWriterMockRecorder) Status() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockResponseWriter)(nil).Status))
}

// Write mocks base method
func (m *MockResponseWriter) Write(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockResponseWriterMockRecorder) Write(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockResponseWriter)(nil).Write), arg0)
}

// WriteHeader mocks base method
func (m *MockResponseWriter) WriteHeader(arg0 int) {
	m.ctrl.Call(m, "WriteHeader", arg0)
}

// WriteHeader indicates an expected call of WriteHeader
func (mr *MockResponseWriterMockRecorder) WriteHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHeader", reflect.TypeOf((*MockResponseWriter)(nil).WriteHeader), arg0)
}

// MockHandler is a mock of Handler interface
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method
func (m *MockHandler) Handle(arg0 Context) error {
	ret := m.ctrl.Call(m, "Handle", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle
func (mr *MockHandlerMockRecorder) Handle(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockHandler)(nil).Handle), arg0)
}
